{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["days","App","props","toggle","headers","keys","split","setState","prevState","selection","schedules","length","newState","Object","assign","i","matrix","createSchedule","push","name","Array","fill","map","updateScheduleName","value","removeSchedule","splice","selectSchedule","Number","report","state","rows","cells","j","arr","k","find","el","init","this","isArray","is_reporting","className","Grid","Row","Col","lg","Table","Navigation","href","Glyphicon","glyph","Component","schedule","key","Panel","ButtonToolbar","ButtonGroup","justified","Button","onClick","active","Schedule","handleRemoveSchedule","handleChangeText","e","target","handleSelectSchedule","is_active","FormGroup","InputGroup","FormControl","onChange","type","bsStyle","Header","HeaderRow","id","HourCell","hour","String","padStart","Body","color","Cell","handleClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6222ea94.chunk.js","sourcesContent":["import React, { Component, } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport { Panel, Button, ButtonGroup, ButtonToolbar, FormGroup, FormControl, InputGroup, Glyphicon, Grid, Row, Col, } from 'react-bootstrap';\n\nconst days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', ];\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            init: Array(10).fill(false).map(() => Array(7).fill(false)),\n            schedules: Array(0),\n            selection: null,\n            report: null,\n        };\n    }\n\n    toggle = (headers) => {\n        const keys = headers.split(' '); // 1st = rows, 2nd = column\n        this.setState((prevState, props) => {\n            if (prevState.selection === null || prevState.schedules.length < 1) { // catching non-selected schedule update\n                return false;\n            }\n            const newState = Object.assign({}, prevState);\n            const i = newState.selection; // alias to make things easier to read\n            const schedules = newState.schedules; // same here\n            schedules[i].matrix[keys[0]][keys[1]] = !schedules[i].matrix[keys[0]][keys[1]];\n            return schedules;\n        });\n    }\n\n    createSchedule = () => {\n        this.setState((prevState, props) => {\n            const newState = Object.assign({}, prevState);\n            newState.schedules.push({ name: '', matrix: Array(10).fill(false).map(() => Array(7).fill(false)), });\n            if (newState.schedules.length === 1) {\n                newState.selection = 0;\n            }\n            return newState;\n        });\n    }\n\n    updateScheduleName = (i, value) => {\n        this.setState((prevState, props) => {\n            const newState = Object.assign({}, prevState);\n            newState.schedules[i].name = value;\n            return newState;\n        });\n    }\n\n    removeSchedule = (i) => {\n        this.setState((prevState, props) => {\n            const newState = Object.assign({}, prevState);\n            newState.schedules.splice(i, 1);\n            if (newState.selection !== null && newState.selection > 1) { // if more than one schedule exists\n                newState.selection = newState.selection - 1;\n            } else { // last schedule is removed; selection counter is reset\n                newState.selection = null;\n            }\n            return newState;\n        })\n    }\n\n    selectSchedule = (i) => {\n        this.setState((prevState, props) => {\n            const newState = Object.assign({}, prevState);\n            newState.selection = Number(i);\n            newState.report = null;\n            return newState;\n        });\n    }\n\n    report = () => {\n        if (this.state.schedules.length === 0) {\n            return;\n        }\n\n        this.setState((prevState, props) => {\n            const newState = Object.assign({}, prevState);\n            const rows = [];\n            for (let i = 0; i < this.state.schedules[0].matrix.length; i++) { // i = row\n                const cells = [];\n                for (let j = 0; j < this.state.schedules[0].matrix[i].length; j++) { // j = cell\n                    const arr = [];\n                    for (let k = 0; k < this.state.schedules.length; k++) { // k = matrix to compare against\n                        arr.push(this.state.schedules[k].matrix[i][j]);\n                    }\n                    let value = arr.find((el) => {\n                        return el === false;\n                    })\n                    if (typeof value === 'undefined') {\n                        value = true;\n                    }\n                    cells.push(value);\n                }\n                rows.push(cells);\n            }\n            newState.report = rows;\n            newState.selection = null;\n            return newState;\n        });\n    }\n\n    render() {\n        let matrix = this.state.init;\n        if (typeof this.state.selection === 'number' && this.state.schedules.length > 0) {\n            matrix = this.state.schedules[this.state.selection].matrix;\n        }\n        if (Array.isArray(this.state.report)) {\n            matrix = this.state.report;\n        }\n        const is_reporting = this.state.report !== null;\n        return (\n            <div className=\"appWrapper\"> \n                <Grid>\n                    <Row>\n                        <Col lg={6}>\n                            <Table toggle={this.toggle} matrix={matrix} />\n                        </Col>\n                        <Navigation\n                            schedules={this.state.schedules} \n                            createSchedule={this.createSchedule}\n                            updateScheduleName={this.updateScheduleName}\n                            removeSchedule={this.removeSchedule}\n                            selectSchedule={this.selectSchedule}\n                            report={this.report}\n                            selection={this.state.selection}\n                            is_reporting={is_reporting}\n                        />\n                    </Row>\n                </Grid>\n                <div className=\"issue-tracker\">\n                    <a href=\"https://bitbucket.org/alexkuc/society-meeting-planner/issues/new\">report bug <Glyphicon glyph=\"link\" /></a>\n                </div>\n                <div className=\"credits\">\n                    <span>Created by Alexander K.</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction Navigation(props) {\n    let schedules = [];\n    for (let i = 0; i < props.schedules.length; i++) {\n        schedules.push(<Schedule \n                                schedule={props.schedules[i]} \n                                updateScheduleName={props.updateScheduleName} \n                                removeSchedule={props.removeSchedule}\n                                selectSchedule={props.selectSchedule} \n                                i={i} key={i} \n                                selection={props.selection}\n                            />)\n    }\n    return (\n        <Col lg={3}>\n            <Panel className=\"banner\" >\n                Society Meeting Planner App\n            </Panel>\n            <ButtonToolbar>\n                <ButtonGroup justified>\n                    <Button onClick={props.report} active={props.is_reporting}>Report</Button>\n                    <Button onClick={props.createSchedule}>Add Schedule</Button>\n                </ButtonGroup>\n            </ButtonToolbar>\n            <form className=\"schedules\">\n                {schedules}\n            </form>\n        </Col>\n    );\n}\n\nclass Schedule extends Component {\n    handleRemoveSchedule = () => {\n        this.props.removeSchedule(this.props.i);\n    }\n\n    handleChangeText = (e) => {\n        this.props.updateScheduleName(this.props.i, e.target.value);\n    }\n\n    handleSelectSchedule = (e) => {\n        this.props.selectSchedule(this.props.i);\n    }\n\n    render() {\n        let is_active = false;\n        if (this.props.selection === this.props.i) {\n            is_active = true;\n        }\n        return (\n            <FormGroup>\n                <InputGroup>\n                    <InputGroup.Button>\n                        <Button onClick={this.handleSelectSchedule} active={is_active} value={this.props.i}>\n                            <Glyphicon glyph=\"circle-arrow-right\" />\n                        </Button>\n                    </InputGroup.Button>\n                    <FormControl onChange={this.handleChangeText} type=\"text\" value={this.props.schedule.name} />\n                    <InputGroup.Button>\n                        <Button onClick={this.handleRemoveSchedule} bsStyle=\"danger\" value={this.props.i}>\n                            <Glyphicon glyph=\"remove\" />\n                        </Button>\n                    </InputGroup.Button>\n                </InputGroup>\n            </FormGroup>\n        );\n    }\n}\n\nfunction Table(props) {\n    return (\n        <table>\n            <Header />\n            <Body toggle={props.toggle} matrix={props.matrix} />\n        </table>\n    );\n}\n\nfunction HeaderRow() {\n    let cells = [];\n    for (var i = 0; i < days.length; i++) {\n        cells.push(<th id={i} key={i}>{days[i]}</th>);\n    }\n    return <tr><th>Hours</th>{cells}</tr>;\n}\n\nfunction HourCell(props) {\n    const offset = 9;\n    let hour = String(props.i + offset);\n    hour = hour.padStart(2, '0');\n    hour = hour + ':00';\n    return <th id={props.i}>{hour}</th>;\n}\n\nfunction Header() {\n    return (\n        <thead>\n          <HeaderRow />\n        </thead>\n    );\n}\n\nclass Body extends Component {\n    render() {\n        const rows = [];\n        for (let i = 0; i < this.props.matrix.length; i++) {\n            const cells = [];\n            for (let j = 0; j < this.props.matrix[i].length; j++) {\n                const headers = i + ' ' + j;\n                let color = '';\n                if (this.props.matrix[i][j] === true) {\n                    color = 'selected-cell';\n                }\n                cells.push(<Cell headers={headers} key={headers} toggle={this.props.toggle} color={color} value={this.props.matrix[i][j]} />);\n            }\n            rows.push(<tr key={i}><HourCell i={i} />{cells}</tr>);\n        }\n        return <tbody>{rows}</tbody>;\n    }\n}\n\nclass Cell extends Component {\n    handleClick = () => {\n        this.props.toggle(this.props.headers);\n    }\n\n    render() {\n        return <td headers={this.props.headers} onClick={this.handleClick} className={this.props.color}>{this.props.value}</td>;\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}